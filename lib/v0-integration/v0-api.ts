// lib/v0-integration/v0-api.ts
// V0 API Integration for JoinEcoGrow Platform

export interface V0Component {
  id: string;
  name: string;
  code: string;
  description?: string;
  category?: string;
  tags?: string[];
  created_at: string;
  updated_at: string;
}

export interface V0GenerationRequest {
  prompt: string;
  framework: 'nextjs' | 'react' | 'vue';
  styling: 'tailwind' | 'css' | 'styled-components';
  features?: string[];
}

export interface V0GenerationResponse {
  success: boolean;
  component?: V0Component;
  error?: string;
}

class V0API {
  private baseUrl = 'https://v0.dev/api';
  private apiKey: string;

  constructor() {
    this.apiKey = process.env.V0_API_KEY || '';
  }

  /**
   * Generate a component using V0
   */
  async generateComponent(request: V0GenerationRequest): Promise<V0GenerationResponse> {
    try {
      // Mock V0 generation for development
      if (!this.apiKey) {
        return this.mockGeneration(request);
      }

      const response = await fetch(`${this.baseUrl}/generate`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      });

      if (!response.ok) {
        throw new Error(`V0 API error: ${response.statusText}`);
      }

      const data = await response.json();
      return {
        success: true,
        component: data.component,
      };
    } catch (error) {
      console.error('V0 generation error:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  /**
   * Mock V0 generation for development
   */
  private mockGeneration(request: V0GenerationRequest): V0GenerationResponse {
    const componentCode = this.generateMockComponent(request);
    
    return {
      success: true,
      component: {
        id: `v0-${Date.now()}`,
        name: this.generateComponentName(request.prompt),
        code: componentCode,
        description: request.prompt,
        category: 'ui-component',
        tags: ['v0-generated', 'joinecogrow'],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    };
  }

  /**
   * Generate mock component code based on request
   */
  private generateMockComponent(request: V0GenerationRequest): string {
    const componentName = this.generateComponentName(request.prompt);
    
    return `// V0 Generated Component: ${componentName}
// Prompt: ${request.prompt}
// Framework: ${request.framework}
// Styling: ${request.styling}

'use client';

import React from 'react';

interface ${componentName}Props {
  // Add your props here
}

export default function ${componentName}({ }: ${componentName}Props) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h1 className="text-3xl font-bold text-green-800 mb-4">
            ðŸŒ± ${componentName}
          </h1>
          <p className="text-gray-600 mb-6">
            ${request.prompt}
          </p>
          
          {/* JoinEcoGrow Brand Colors */}
          <div className="grid grid-cols-4 gap-4 mb-6">
            <div className="bg-[#388E3C] h-16 rounded-lg flex items-center justify-center text-white font-semibold">
              #388E3C
            </div>
            <div className="bg-[#7CB342] h-16 rounded-lg flex items-center justify-center text-white font-semibold">
              #7CB342
            </div>
            <div className="bg-[#29B6F6] h-16 rounded-lg flex items-center justify-center text-white font-semibold">
              #29B6F6
            </div>
            <div className="bg-[#9CCC65] h-16 rounded-lg flex items-center justify-center text-white font-semibold">
              #9CCC65
            </div>
          </div>

          {/* Component Content */}
          <div className="space-y-4">
            <div className="p-4 bg-green-100 rounded-lg">
              <h3 className="font-semibold text-green-800 mb-2">Generated by V0</h3>
              <p className="text-green-700">
                This component was generated using V0.dev and integrated with Cursor for JoinEcoGrow Platform.
              </p>
            </div>
            
            <div className="p-4 bg-blue-100 rounded-lg">
              <h3 className="font-semibold text-blue-800 mb-2">Framework</h3>
              <p className="text-blue-700">Next.js 14 with ${request.framework}</p>
            </div>
            
            <div className="p-4 bg-purple-100 rounded-lg">
              <h3 className="font-semibold text-purple-800 mb-2">Styling</h3>
              <p className="text-purple-700">Tailwind CSS with ${request.styling}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}`;
  }

  /**
   * Generate component name from prompt
   */
  private generateComponentName(prompt: string): string {
    const words = prompt
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .split(' ')
      .filter(word => word.length > 2)
      .slice(0, 3);
    
    const name = words
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join('');
    
    return name || 'GeneratedComponent';
  }

  /**
   * Sync component with V0
   */
  async syncComponent(component: V0Component): Promise<boolean> {
    try {
      if (!this.apiKey) {
        console.log('V0 API key not configured, skipping sync');
        return true;
      }

      const response = await fetch(`${this.baseUrl}/sync`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(component),
      });

      return response.ok;
    } catch (error) {
      console.error('V0 sync error:', error);
      return false;
    }
  }
}

export const v0API = new V0API();
