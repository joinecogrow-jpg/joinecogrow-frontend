// scripts/v0-cursor-sync.js
// V0-Cursor Integration Script

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

class V0CursorSync {
  constructor() {
    this.componentsDir = path.join(process.cwd(), 'components', 'generated');
    this.typesDir = path.join(process.cwd(), 'types', 'generated');
    this.isWatching = false;
  }

  /**
   * Start the V0-Cursor sync process
   */
  async start() {
    console.log('🚀 Starting V0-Cursor Integration...');
    
    // Ensure directories exist
    await this.ensureDirectories();
    
    // Start watching for changes
    await this.watchForChanges();
    
    // Start the development server
    this.startDevServer();
    
    console.log('✅ V0-Cursor Integration is now active!');
    console.log('📝 Visit http://localhost:3000 to use the integration interface');
    console.log('👀 Watching for file changes in:', this.componentsDir);
  }

  /**
   * Ensure required directories exist
   */
  async ensureDirectories() {
    const dirs = [this.componentsDir, this.typesDir];
    
    for (const dir of dirs) {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log('📁 Created directory:', dir);
      }
    }
  }

  /**
   * Watch for file changes
   */
  async watchForChanges() {
    if (this.isWatching) return;
    
    try {
      const chokidar = require('chokidar');
      
      const watcher = chokidar.watch(`${this.componentsDir}/**/*.tsx`, {
        ignored: /node_modules/,
        persistent: true,
        ignoreInitial: true,
      });

      watcher.on('change', async (filePath) => {
        console.log('📝 File changed:', path.basename(filePath));
        await this.syncWithV0(filePath);
      });

      watcher.on('add', async (filePath) => {
        console.log('➕ File added:', path.basename(filePath));
        await this.syncWithV0(filePath);
      });

      this.isWatching = true;
      console.log('👀 File watcher started');
      
    } catch (error) {
      console.warn('⚠️ File watching not available:', error.message);
    }
  }

  /**
   * Sync file changes with V0
   */
  async syncWithV0(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const fileName = path.basename(filePath, '.tsx');
      
      // Call the API to sync with V0
      const response = await fetch('http://localhost:3000/api/v0/cursor-integration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: `Updated component: ${fileName}`,
          options: {
            framework: 'nextjs',
            styling: 'tailwind',
          },
        }),
      });

      if (response.ok) {
        console.log('🔄 Synced with V0:', fileName);
      } else {
        console.warn('⚠️ V0 sync failed for:', fileName);
      }
    } catch (error) {
      console.warn('⚠️ Sync error:', error.message);
    }
  }

  /**
   * Start the development server
   */
  startDevServer() {
    if (process.env.NODE_ENV === 'production') return;
    
    console.log('🌐 Starting development server...');
    
    exec('npm run dev', (error, stdout, stderr) => {
      if (error) {
        console.error('❌ Failed to start dev server:', error);
        return;
      }
      
      if (stdout) {
        console.log('📡 Dev server output:', stdout);
      }
      
      if (stderr) {
        console.warn('⚠️ Dev server warnings:', stderr);
      }
    });
  }

  /**
   * Generate a sample component
   */
  async generateSampleComponent() {
    const sampleCode = `// Sample V0 Generated Component
'use client';

import React from 'react';

interface SampleComponentProps {
  title?: string;
  description?: string;
}

export default function SampleComponent({ 
  title = "Sample Component",
  description = "Generated by V0-Cursor Integration"
}: SampleComponentProps) {
  return (
    <div className="p-6 bg-white rounded-lg shadow-lg border border-green-200">
      <h2 className="text-2xl font-bold text-green-800 mb-4">
        🌱 {title}
      </h2>
      <p className="text-gray-600 mb-4">
        {description}
      </p>
      <div className="grid grid-cols-3 gap-4">
        <div className="p-4 bg-green-100 rounded-lg text-center">
          <div className="text-2xl font-bold text-green-800">100+</div>
          <div className="text-green-600">Features</div>
        </div>
        <div className="p-4 bg-blue-100 rounded-lg text-center">
          <div className="text-2xl font-bold text-blue-800">50+</div>
          <div className="text-blue-600">Components</div>
        </div>
        <div className="p-4 bg-purple-100 rounded-lg text-center">
          <div className="text-2xl font-bold text-purple-800">24/7</div>
          <div className="text-purple-600">Support</div>
        </div>
      </div>
    </div>
  );
}`;

    const filePath = path.join(this.componentsDir, 'SampleComponent.tsx');
    fs.writeFileSync(filePath, sampleCode, 'utf8');
    console.log('📝 Created sample component:', filePath);
  }
}

// Start the integration if this script is run directly
if (require.main === module) {
  const sync = new V0CursorSync();
  
  // Handle graceful shutdown
  process.on('SIGINT', () => {
    console.log('\n🛑 Shutting down V0-Cursor Integration...');
    process.exit(0);
  });

  // Start the integration
  sync.start().catch(console.error);
}

module.exports = V0CursorSync;
